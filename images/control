#!/bin/sh -e
self=$(readlink -f $0)
self=$(dirname "$self")

base=$1
cmd=$2
shift 2

if [ ! -d $self/$base ]
then
	echo "Unknown base image $base"
	exit 1
fi

ssh_opts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

guest_ssh() {
	ssh $ssh_opts "$@"
}

_docker_boot() {
	docker run -d \
		-v "$self/$base":/base:ro \
		--mount type=tmpfs,destination=/var/tmp \
		--device /dev/kvm \
		-p 127.0.0.1:$port:$port \
		qemu /bin/qemu-system-x86_64 \
		-m ${MEMORY:-2048} \
		-net nic,model=virtio -net user,hostfwd=tcp::$port-:22 \
		-cpu host \
		-enable-kvm \
		-nographic \
		-device virtio-rng-pci \
		-drive file="$wd/root.img.qcow2",media=disk,snapshot=on,if=virtio \
		"$@" > /tmp/docker-$port.id
}

_qemu_boot() {
	qemu-system-x86_64 \
		-pidfile /tmp/qemu-$port.id \
		-m ${MEMORY:-2048} \
		-net nic,model=virtio -net user,hostfwd=tcp::$port-:22 \
		-cpu host \
		-enable-kvm \
		-nographic \
		-device virtio-rng-pci \
		-drive file="$wd/root.img.qcow2",media=disk,snapshot=on,if=virtio \
		"$@"
}

_boot() {
	if [ "$means" = "docker" ]
	then
		_docker_boot "$@"
	elif [ "$means" = "qemu" ]
	then
		_qemu_boot "$@"
	fi
}

cmd_boot() {
	port=$1
	if [ "$#" -gt 1 ]
	then
		means=$2
	else
		means="docker"
	fi

	if [ "$means" = "docker" ]
	then
		wd="/base"
	elif [ "$means" = "qemu" ]
	then
		wd="$self/$base"
	else
		printf "Unknown boot mode %s\n" "$means" >2
		exit 1
	fi

	boot
}

_wait_boot() {
	port=$1
	attempts=0
	echo "Waiting for VM to come up..."
	while ! guest_ssh -p "$port" build@localhost true 2>&1 >/dev/null
	do
		sleep 5
		attempts=$((attempts + 1))
		if [ "$attempts" -eq 10 ]
		then
			echo "Giving up."
			cmd_cleanup "$port"
			exit 1
		fi
		echo "Attempt $attempts..."
	done
}

cmd_cleanup() {
	port=$1
	# Power off
	if [ "$#" -eq 1 ]
	then
		if [ -e /tmp/docker-$port.id ]
		then
			cid=$(cat /tmp/docker-$port.id)
			guest_ssh -p $port build@localhost $poweroff_cmd || true
			sleep 2
			docker kill $cid && sleep 2 || true
			rm /tmp/docker-$port.id
		fi
		if [ -e /tmp/qemu-$port.id ]
		then
			cid=$(cat /tmp/qemu-$port.id)
			guest_ssh -p $port build@localhost $poweroff_cmd || true
			sleep 2
			kill $cid || true
			kill -9 $cid || true
			rm /tmp/qemu-$port.id
		fi
	fi
}

. $self/$base/functions

case "$cmd" in
	boot)
		cmd_boot "$@"
		;;
	cleanup)
		cmd_cleanup "$@"
		;;
	sanity-check)
		sanity_check "$@"
		;;
	install)
		install "$@"
		;;
	add-repo)
		add_repository "$@"
		;;
	ssh)
		port=$1
		shift
		guest_ssh -p "$port" build@localhost "$@"
		;;
	*)
		echo "Unknown command $cmd"
		;;
esac
