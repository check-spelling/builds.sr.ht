#!/bin/sh -e
self=$(readlink -f $0)
self=$(dirname "$self")

base=$1
cmd=$2
shift 2

if [ ! -d $self/$base ]
then
    echo "Unknown base image $base"
    exit 1
fi

ssh_opts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

function guest_ssh() {
    ssh $ssh_opts "$@"
}

function _docker_boot() {
	docker run -d \
		-v "$self/$base":/base:ro \
		--mount type=tmpfs,destination=/var/tmp \
		--device /dev/kvm \
		-p 127.0.0.1:$port:$port \
		qemu /bin/qemu-system-x86_64 \
		-m ${MEMORY:-2048} \
		-net nic,model=virtio -net user,hostfwd=tcp::$port-:22 \
		-cpu host \
		-enable-kvm \
		-nographic \
		-device virtio-rng-pci \
		-drive file="$wd/root.img.qcow2",media=disk,snapshot=on,if=virtio \
		"$@"
}

function _qemu_boot() {
	qemu-system-x86_64 \
		-m ${MEMORY:-2048} \
		-net nic,model=virtio -net user,hostfwd=tcp::$port-:22 \
		-cpu host \
		-enable-kvm \
		-nographic \
		-device virtio-rng-pci \
		-drive file="$wd/root.img.qcow2",media=disk,snapshot=on,if=virtio \
		"$@"
}

function _boot() {
	[ "$means" == "docker" ] && _docker_boot "$@"
	[ "$means" == "qemu" ] && _qemu_boot "$@"
}

function cmd_boot() {
    port=$1
	if [ "$#" -gt 1 ]
	then
		means=$2
	else
		means="docker"
	fi

	if [ "$means" == "docker" ]
	then
		wd="/base"
	elif [ "$means" == "qemu" ]
	then
		wd="$self/$base"
	else
		printf "Unknown boot mode %s\n" "$means" >2
		exit 1
	fi

	echo $(boot) > /tmp/$means-$port.id
}

function _wait_boot() {
	port=$1
	attempts=0
	echo "Waiting for VM to come up..."
	while ! guest_ssh -p "$port" build@localhost true 2>&1 >/dev/null
	do
		attempts=$((attempts + 1))
		if [ "$attempts" -eq 5 ]
		then
			echo "Giving up."
			exit 1
		fi
		echo "Attempt $attempt..."
	done
}

function cmd_cleanup() {
    port=$1
    # Power off
    if [ $# == 1 ]
    then
        cid=$(cat /tmp/docker-$port.id)
        if [ "$cid" != "" ]
        then
            guest_ssh -p $port build@localhost $poweroff_cmd || true
            sleep 2
            docker kill $cid && sleep 2 || true
            rm /tmp/docker-$port.id
        fi
        cid=$(cat /tmp/qemu-$port.id)
        if [ "$cid" != "" ]
        then
            guest_ssh -p $port build@localhost $poweroff_cmd || true
            sleep 2
			kill $cid || true
			kill -9 $cid || true
            rm /tmp/qemu-$port.id
        fi
    fi
}

. $self/$base/functions

case "$cmd" in
    boot)
		cmd_boot "$@"
        ;;
    cleanup)
        cmd_cleanup "$@"
        ;;
    sanity-check)
        sanity_check "$@"
        ;;
    install)
        install "$@"
        ;;
    add-repo)
        add_repository "$@"
        ;;
    ssh)
        port=$1
        shift
        guest_ssh -p "$port" build@localhost "$@"
        ;;
    *)
        echo "Unknown command $cmd"
        ;;
esac
