#!/usr/bin/env bash
if [ $EUID != 0 ]
then
    echo "Must be run as root"
    exit 1
fi
set -xe

bootstrap=archlinux-bootstrap-2017.02.01-x86_64.tar.gz

if [ ! -f $bootstrap ]
then
    wget -c http://mirrors.kernel.org/archlinux/iso/2017.02.01/archlinux-bootstrap-2017.02.01-x86_64.tar.gz
fi
tar xf $bootstrap

function run_root() {
    local cmd="$@"
    chroot root.x86_64 /bin/bash -c "$cmd"
}

function run_normal() {
    local cmd="$@"
    chroot --userspec=$SUDO_UID:$SUDO_GID \
        root.x86_64 \
        /bin/bash -c "cd /home/build && $cmd"
}

echo 'Server = http://lug.mtu.edu/archlinux/$repo/os/$arch' >> root.x86_64/etc/pacman.d/mirrorlist
echo 'nameserver 8.8.8.8' >> root.x86_64/etc/resolv.conf

mount root.x86_64 root.x86_64 --bind
mount --bind /proc root.x86_64/proc
mount --bind /sys root.x86_64/sys
mount --bind /dev root.x86_64/dev
mount --bind /dev/pts root.x86_64/dev/pts
mount --bind /dev/shm root.x86_64/dev/shm
mount --bind /run root.x86_64/run

run_root pacman -Syy
run_root pacman-key --init
run_root pacman-key --populate archlinux
run_root pacman -Syu --force --noconfirm \
    base-devel \
    git \
    openssh \
    linux \
    mkinitcpio \
    systemd-sysvcompat \
    dhcpcd \
    rsync

sed -i 's/#en_US.UTF-8/en_US.UTF-8/' root.x86_64/etc/locale.gen
run_root locale-gen

cat <<EOF > root.x86_64/usr/lib/initcpio/hooks/fix-mount
#!/bin/bash
custom_mount_handler() {
    msg ":: mounting '\$root' on real root"
    if ! mount \${rootfstype:+-t \$rootfstype} -o \${rwopt:-ro}\${rootflags:+,\$rootflags} "\$root" "\$1"; then
        echo "You are now being dropped into an emergency shell."
        launch_interactive_shell
        msg "Trying to continue (this will most likely fail) ..."
    fi
}

run_earlyhook() {
    mount_handler=custom_mount_handler
}
EOF

cat <<EOF > root.x86_64/usr/lib/initcpio/install/fix-mount
#!/bin/bash
build() {
    add_runscript
}

help() {
    cat <<HELPEOF
This hook fixes booting to 9p filesystems
HELPEOF
}
EOF

cp mkinitcpio.conf root.x86_64/etc/

run_root mkinitcpio -p linux
run_root systemctl enable dhcpcd

run_root groupadd sudo
run_root useradd -mG sudo build
run_root passwd -d build
echo '%sudo ALL=(ALL) NOPASSWD: ALL' >> root.x86_64/etc/sudoers

sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords yes/' root.x86_64/etc/ssh/sshd_config
run_root systemctl enable sshd

run_normal curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/cower.tar.gz
run_normal tar xf cower.tar.gz
run_normal 'cd cower && makepkg -si --noconfirm --skippgpcheck'
run_normal rm -r cower cower.tar.gz

run_normal curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/pacaur.tar.gz
run_normal tar xf pacaur.tar.gz
run_normal 'cd pacaur && makepkg -si --noconfirm --skippgpcheck'
run_normal rm -r pacaur pacaur.tar.gz

pkill gpg-agent
umount -R root.x86_64
