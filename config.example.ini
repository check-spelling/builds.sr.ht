[sr.ht]
#
# The name of your network of sr.ht-based sites
site-name=sourcehut
#
# The top-level info page for your site
site-info=https://sourcehut.org
#
# {{ site-name }}, {{ site-blurb }}
site-blurb=the hacker's forge
#
# If this != production, we add a banner to each page
environment=development
#
# Contact information for the site owners
owner-name=Drew DeVault
owner-email=sir@cmpwn.com
#
# The source code for your fork of sr.ht
source-url=https://git.sr.ht/~sircmpwn/srht
#
# A secret key to encrypt session cookies with. Use `srht-keygen service` to
# generate this. This should be unique to each site, but shared among nodes of
# that site. For example, git.sr.ht and hg.sr.ht have different keys, but
# git1.sr.ht has the same key as git2.sr.ht.
service-key=
#
# A secret key to encrypt internal messages with. Use `srht-keygen network` to
# generate this. This should be consistent between all *.sr.ht sites and nodes.
network-key=

[mail]
#
# Outgoing SMTP settings
smtp-host=
smtp-port=
smtp-user=
smtp-password=
smtp-from=
#
# Application exceptions are emailed to this address
error-to=
error-from=
#
# Your PGP key information (DO NOT mix up pub and priv here)
# You must remove the password from your secret key, if present.
# You can do this with gpg --edit-key [key-id], then use the passwd
# command and do not enter a new password.
pgp-privkey=
pgp-pubkey=
pgp-key-id=

[webhooks]
#
# base64-encoded Ed25519 key for signing webhook payloads. This should be
# consistent for all *.sr.ht sites, as we'll use this key to verify signatures
# from other sites in your network.
#
# Use the srht-webhook-keygen command to generate a key.
private-key=

[builds.sr.ht]
# 
# URL builds.sr.ht is being served at (protocol://domain)
origin=http://builds.sr.ht.local
#
# Address and port to bind the debug server to
debug-host=0.0.0.0
debug-port=5002
#
# Configures the SQLAlchemy connection string for the database.
connection-string=postgresql://postgres@localhost/builds.sr.ht
#
# Set to "yes" to automatically run migrations on package upgrade.
migrate-on-upgrade=yes
#
# The redis connection used for the Celery worker (configure this on both the
# master and workers)
redis=redis://localhost:6379/0
#
# builds.sr.ht's OAuth client ID and secret for meta.sr.ht
# Register your client at meta.example.org/oauth
oauth-client-id=
oauth-client-secret=

#
# These config options are only necessary for systems running a build runner
[builds.sr.ht::worker]
#
# Name of this build runner
name=runner.sr.ht.local
#
# Path to write build logs
buildlogs=./logs
#
# Path to the build images
images=./images
#
# In production you should NOT put the build user in the docker group. Instead,
# make a scratch user who is and write a sudoers or doas.conf file that allows
# them to execute just the control command, then update this config option. For
# example:
#
#   doas -u docker /var/lib/images/control
#
# Assuming doas.conf looks something like this:
#
#   permit nopass builds as docker cmd /var/lib/images/control
#
# For more information about the security model of builds.sr.ht, visit the wiki:
#
#   https://man.sr.ht/builds.sr.ht/security
controlcmd=./images/control
#
# Max build duration. See https://golang.org/pkg/time/#ParseDuration
timeout=45m

[meta.sr.ht]
origin=http://meta.sr.ht.local
